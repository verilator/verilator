# DESCRIPTION: Github actions config
# This name is key to badges in README.adoc, so we use the name build
# SPDX-License-Identifier: LGPL-3.0-only OR Artistic-2.0

name: build

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
  - cron: '0 0 * * 0' # weekly

env:
  CI_OS_NAME: linux
  CI_COMMIT: ${{ github.sha }}
  CCACHE_COMPRESS: 1
  CCACHE_DIR: ${{ github.workspace }}/.ccache
  CCACHE_MAXSIZE: 2Gi  # 2GiB for clang and gcc, 4GiB in total

jobs:

  Build:
    strategy:
      fail-fast: false
      matrix:
        os: [ 'ubuntu-20.04' ] # 'ubuntu-18.04',
        debug: [ opt, dbg ]
        compiler:
          - { cc: clang, cxx: clang++ }
          - { cc: gcc,   cxx: g++     }
    runs-on: ${{ matrix.os }}
    name: Build | ${{ matrix.os }} | ${{ matrix.compiler.cc }} | ${{ matrix.debug }}
    env:
      CI_OS_NAME: linux
      CI_RUNS_ON: ubuntu-20.04
      CI_COMMIT: ${{ github.sha }}
      CCACHE_COMPRESS: 1
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_MAXSIZE: 2Gi  # 2GiB for clang and gcc, 4GiB in total
      CC: ${{ matrix.compiler.cc }}
      CXX: ${{ matrix.compiler.cxx }}
      CI_BUILD_STAGE_NAME: build
      CACHE_KEY: ${{ matrix.os }}-${{ matrix.compiler.cc }}
      CI_MAKE_SRC_TARGET: ${{ matrix.debug }}
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Cache
      uses: actions/cache@v2
      env:
        cache-name: ccache
      with:
        path: ${{ github.workspace }}/.ccache
        key: ${{ env.CACHE_KEY }}-${{ env.cache-name }}-${{ github.sha }}
        restore-keys: ${{ env.CACHE_KEY }}-${{ env.cache-name }}

    - name: Install packages for build
      run: ./ci/ci-install.bash

    - name: Build
      run: |
        ./ci/ci-script.bash

        # FIXME Should create a real package/tarball
        touch verilator-${CI_COMMIT}-${{ matrix.debug }}.tgz

    - uses: actions/upload-artifact@v2
      with:
        path: verilator-${{ env.CI_COMMIT }}-${{ matrix.compiler.cc }}-${{ matrix.debug }}.tgz


  Test:
    needs: Build
    strategy:
      fail-fast: false
      max-parallel: 8
      matrix:
        os: [ 'ubuntu-20.04' ] # 'ubuntu-18.04',
        debug: [ opt, dbg ]
        compiler:
          - { cc: clang, cxx: clang++ }
          - { cc: gcc,   cxx: g++     }
        suite:
          - dist-vlt-0
          - dist-vlt-1
          - vltmt-0
          - vltmt-1
    runs-on: ${{ matrix.os }}
    name: Test | ${{ matrix.os }} | ${{ matrix.compiler.cc }} | ${{ matrix.debug }} | ${{ matrix.suite }}
    env:
      CC: ${{ matrix.compiler.cc }}
      CXX: ${{ matrix.compiler.cxx }}
      CI_BUILD_STAGE_NAME: test
      CACHE_KEY: ${{ matrix.os }}-${{ matrix.compiler.cc }}
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Cache
      uses: actions/cache@v2
      env:
        cache-name: ccache
      with:
        path: ${{ github.workspace }}/.ccache
        key: ${{ env.CACHE_KEY }}-${{ env.cache-name }}-${{ github.sha }}
        restore-keys: ${{ env.CACHE_KEY }}-${{ env.cache-name }}

    - uses: actions/download-artifact@v2

    - name: Install Verilator and test dependencies
      run: |
        # FIXME Should install artifact/verilator-${CI_COMMIT}-${{ matrix.debug }}.tgz

        ./ci/ci-install.bash

    - name: Test
      env:
        TESTS: ${{ matrix.suite }}
      run: ./ci/ci-script.bash
