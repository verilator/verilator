`line 1 "t/t_preproc.v" 1
 
 
 
 

`line 6 "t/t_preproc.v" 0
 
 
 
`line 8 "t/t_preproc.v" 0
`line 1 "t/t_preproc_inc2.vh" 1
 
`line 2 "t/t_preproc_inc2.vh" 0
 
 
 
At file "t/t_preproc_inc2.vh"  line 5
 
 
`line 7 "t/t_preproc_inc2.vh" 0
`line 1 "t/t_preproc_inc3.vh" 1
`line 2 "inc3_a_filename_from_line_directive" 0
 
 
 
 

`line 7 "inc3_a_filename_from_line_directive" 0
 
  
  
   
  At file "inc3_a_filename_from_line_directive"  line 11

`line 13 "inc3_a_filename_from_line_directive" 0
   
  

`line 16 "inc3_a_filename_from_line_directive" 0
 
  


`line 20 "inc3_a_filename_from_line_directive" 2
`line 7 "t/t_preproc_inc2.vh" 0


`line 9 "t/t_preproc_inc2.vh" 2
`line 8 "t/t_preproc.v" 0


`line 10 "t/t_preproc.v" 0
 
 

`line 13 "t/t_preproc.v" 0
/*verilator pass_thru comment*/ 

`line 15 "t/t_preproc.v" 0
/*verilator pass_thru_comment2*/ 

`line 17 "t/t_preproc.v" 0
 
 

`line 20 "t/t_preproc.v" 0
 
 
 
   wire [3:0] q = {
		     1'b1    ,
		       1'b0  ,
		     1'b1    ,
		     1'b1   
		   };

`line 30 "t/t_preproc.v" 0
text.

`line 32 "t/t_preproc.v" 0
 
 
foo   bar    
foobar2

`line 37 "t/t_preproc.v" 0
 



`line 41 "t/t_preproc.v" 0
 




`line 46 "t/t_preproc.v" 0
 
first part 
`line 47 "t/t_preproc.v" 0
  		second part 
`line 47 "t/t_preproc.v" 0
  		third part
{
`line 48 "t/t_preproc.v" 0
		       a,
`line 48 "t/t_preproc.v" 0
		       b,
`line 48 "t/t_preproc.v" 0
		       c}
Line_Preproc_Check 49

`line 51 "t/t_preproc.v" 0
 

`line 53 "t/t_preproc.v" 0
 

`line 55 "t/t_preproc.v" 0
 
 
deep deep

`line 59 "t/t_preproc.v" 0
 
 
"Inside: `nosubst"
"`nosubst"

`line 64 "t/t_preproc.v" 0
 
x y LLZZ x y
p q LLZZ p q r s LLZZ r s LLZZ p q LLZZ p q r s LLZZ r s



`line 70 "t/t_preproc.v" 0
firstline comma","line LLZZ firstline comma","line

`line 72 "t/t_preproc.v" 0
 
x y LLZZ "x" y   

`line 75 "t/t_preproc.v" 0
 
(a,b)(a,b)

`line 78 "t/t_preproc.v" 0
 
$display("left side: \"right side\"")

`line 81 "t/t_preproc.v" 0
 
bar_suffix  more

`line 84 "t/t_preproc.v" 0
 


`line 86 "t/t_preproc.v" 0
	$c("Zap(\"",bug1,"\");");;

`line 87 "t/t_preproc.v" 0
	$c("Zap(\"","bug2","\");");;

`line 89 "t/t_preproc.v" 0
 
 

`line 92 "t/t_preproc.v" 0
 
 

`line 95 "t/t_preproc.v" 0
 
 
 
 
 
 
   initial begin
       
      $display("pre thrupre thrumid thrupost post: \"right side\"");
      $display("left side: \"right side\"");
      $display("left side: \"right side\"");
      $display("left_side: \"right_side\"");
      $display("na: \"right_side\"");
      $display("prep ( midp1 left_side midp2 ( outp ) ): \"right_side\"");
      $display("na: \"nana\"");
      $display("left_side right_side: \"left_side right_side\"");    
      $display(": \"\"");   
      $display("left side: \"right side\"");
      $display("left side: \"right side\"");
      $display("standalone");

`line 116 "t/t_preproc.v" 0
       
 

      $display("twoline: \"first        second\"");
       
      $write("*-* All Finished *-*\n");
      $finish;
   end
endmodule

`line 126 "t/t_preproc.v" 0
 
 

`line 129 "t/t_preproc.v" 0
 




`line 134 "t/t_preproc.v" 0
module add1 ( input wire d1, output wire o1);
 
`line 135 "t/t_preproc.v" 0
wire  tmp_d1 = d1; 
`line 135 "t/t_preproc.v" 0
wire  tmp_o1 = tmp_d1 + 1; 
`line 135 "t/t_preproc.v" 0
assign o1 = tmp_o1 ;    
endmodule
module add2 ( input wire d2, output wire o2);
 
`line 138 "t/t_preproc.v" 0
wire  tmp_d2 = d2; 
`line 138 "t/t_preproc.v" 0
wire  tmp_o2 = tmp_d2 + 1; 
`line 138 "t/t_preproc.v" 0
assign o2 = tmp_o2 ;   
endmodule

`line 141 "t/t_preproc.v" 0
  





`line 147 "t/t_preproc.v" 0
 
  
  
  

`line 152 "t/t_preproc.v" 0
   
`line 152 "t/t_preproc.v" 0
   generate for (i=0; i<(3); i=i+1) begin 
`line 152 "t/t_preproc.v" 0
      psl cover {  m5k.f .ctl._ctl_mvldx_m1.d[i] & ~m5k.f .ctl._ctl_mvldx_m1.q[i] & !m5k.f .ctl._ctl_mvldx_m1.cond & ((m5k.f .ctl.alive & m5k.f .ctl.alive_m1))} report "fondNoRise: m5kc_fcl._ctl_mvldx_m1"; 
`line 152 "t/t_preproc.v" 0
      psl cover { ~m5k.f .ctl._ctl_mvldx_m1.d[i] &  m5k.f .ctl._ctl_mvldx_m1.q[i] & !m5k.f .ctl._ctl_mvldx_m1.cond & ((m5k.f .ctl.alive & m5k.f .ctl.alive_m1))} report "fondNoFall: m5kc_fcl._ctl_mvldx_m1"; 
`line 152 "t/t_preproc.v" 0
   end endgenerate	 

`line 154 "t/t_preproc.v" 0
 
 
module prot();
`protected
    I!#r#e6<_Q{{E2+]I3<[3s)1@D|'E''i!O?]jD>Jo_![Cl)
    #nj1]p,3^1~,="E@QZB\T)eU\pC#C|7=\$J$##A[@-@{Qk]
`line 160 "t/t_preproc.v" 0
`endprotected
endmodule
 

`line 164 "t/t_preproc.v" 0
 
 
module t_lint_pragma_protected;

`line 168 "t/t_preproc.v" 0
`pragma protect begin_protected
`pragma protect version=1
`pragma protect encrypt_agent="XXXXX"
`pragma protect encrypt_agent_info="YYYYY"
`pragma protect data_method="AES128-CBC"
`pragma protect key_keyowner="BIG3#1"
`pragma protect key_keyname="AAAAAA"
`pragma protect key_method="RSA"
`pragma protect encoding = (enctype = "BASE64", line_length = 76, bytes = 64)
`pragma protect key_block
ICAgICAgICAgICAgICAgICAgIEdOVSBMRVNTRVIgR0VORVJBTCBQVUJMSUMgTElDRU5TRQogICAg
KSAyMDA3IE==

`line 181 "t/t_preproc.v" 0
`pragma protect key_keyowner="BIG3#2"
`pragma protect key_keyname="BBBBBB"
`pragma protect key_method="RSA"
`pragma protect encoding = (enctype = "BASE64", line_length = 76, bytes = 128)
`pragma protect key_block
IEV2ZXJ5b25lIGlzIHBlcm1pdHRlZCB0byBjb3B5IGFuZCBkaXN0cmlidXRlIHZlcmJhdGltIGNv
cGllcwogb2YgdGhpcyBsaWNlbnNlIGRvY3VtZW50LCBidXQgY2hhbmdpbmcgaXQgaXMgbm90IGFs
bG93ZWQuCgoKICBUaGl=

`line 190 "t/t_preproc.v" 0
`pragma protect key_keyowner="BIG3#3"
`pragma protect key_keyname="CCCCCCCC"
`pragma protect key_method="RSA"
`pragma protect encoding = (enctype = "BASE64", line_length = 76, bytes = 128)
`pragma protect key_block
TGljZW5zZSBpbmNvcnBvcmF0ZXMKdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zIG9mIHZlcnNpb24g
MyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljCkxpY2Vuc2UsIHN1cHBsZW1lbnRlZCBieSB0aGUg
YWRkaXRpb25hbCBwZXJ=

`line 199 "t/t_preproc.v" 0
`pragma protect encoding = (enctype = "BASE64", line_length = 76, bytes = 295)
`pragma protect data_block
aW5pdGlvbnMuCgogIEFzIHVzZWQgaGVyZWluLCAidGhpcyBMaWNlbnNlIiByZWZlcnMgdG8gdmVy
c2lvbiAzIG9mIHRoZSBHTlUgTGVzc2VyCkdlbmVyYWwgUHVibGljIExpY2Vuc2UsIGFuZCB0aGUg
IkdOVSBHUEwiIHJlZmVycyB0byB2ZXJzaW9uIDMgb2YgdGhlIEdOVQpHZW5lcmFsIFB1YmxpYyBM
aWNlbnNlLgoKICAiVGhlIExpYnJhcnkiIHJlZmVycyB0byBhIGNvdmVyZWQgd29yayBnb3Zlcm5l
ZCBieSB0aGlzIExpY2Vuc2UsCm90aGVyIHRoYW4gYW4gQXBwbGljYXRpb24gb3IgYSBDb21iaW5l
ZCBXb3JrIGFzIG==


`line 209 "t/t_preproc.v" 0
`pragma protect end_protected

`line 211 "t/t_preproc.v" 0
 
`pragma protect
`pragma protect end

`line 215 "t/t_preproc.v" 0
endmodule

`line 217 "t/t_preproc.v" 0
 
 
 
 
 
 
 
 
 

`line 227 "t/t_preproc.v" 0
begin addr <= (({regs[6], regs[7]} + 1)); rd <= 1; end and begin addr <= (({regs[6], regs[7]})); wdata <= (rdata); wr <= 1; end
begin addr <= ({regs[6], regs[7]} + 1); rd <= 1; end
begin addr <= ({regs[6], regs[7]}); wdata <= (rdata); wr <= 1; end  more

`line 231 "t/t_preproc.v" 0
 
 
 
 
`line 234 "t/t_preproc.v" 0
`line 1 "t/t_preproc_inc4.vh" 1
 
`line 2 "t/t_preproc_inc4.vh" 0
 
 
 

`line 6 "t/t_preproc_inc4.vh" 0
 

`line 8 "t/t_preproc_inc4.vh" 2
`line 234 "t/t_preproc.v" 0

`line 235 "t/t_preproc.v" 0
 
  

`line 238 "t/t_preproc.v" 0
 

`line 240 "t/t_preproc.v" 0
 
  


`line 244 "t/t_preproc.v" 0
 
 

`line 247 "t/t_preproc.v" 0
 
$blah("ab,cd","e,f");
$blah(this.logfile,vec);
$blah(this.logfile,vec[1,2,3]);
$blah(this.logfile,{blah.name(), " is not foo"});

`line 253 "t/t_preproc.v" 0
 
 

`line 256 "t/t_preproc.v" 0
`pragma foo = 1
`default_nettype none
`default_nettype uwire

`line 260 "t/t_preproc.v" 0
 
 

`line 263 "t/t_preproc.v" 0
 
 
   

`line 267 "t/t_preproc.v" 0
Line_Preproc_Check 267

`line 269 "t/t_preproc.v" 0
 
 

`line 272 "t/t_preproc.v" 0
    


(p,q)



`line 279 "t/t_preproc.v" 0
(x,y)
Line_Preproc_Check 280

`line 282 "t/t_preproc.v" 0
 
 

`line 285 "t/t_preproc.v" 0
 
 
 
 
beginend    
beginend     
"beginend"   

`line 293 "t/t_preproc.v" 0
 
 
 
 
  `\esc`def

`line 299 "t/t_preproc.v" 0
Not a \`define

`line 301 "t/t_preproc.v" 0
 
 
 
 
 
 
x,y)--bee  submacro has comma paren

`line 309 "t/t_preproc.v" 0
 
 
 
$display("10 %d %d", $bits(foo), 10);

`line 314 "t/t_preproc.v" 0
 
 
 
    

`line 319 "t/t_preproc.v" 0
    
    

`line 322 "t/t_preproc.v" 0
 
 
 











`line 336 "t/t_preproc.v" 0

`line 336 "t/t_preproc.v" 0
   							
`line 336 "t/t_preproc.v" 0
         	
`line 336 "t/t_preproc.v" 0
      
`line 336 "t/t_preproc.v" 0
					
`line 336 "t/t_preproc.v" 0
  								
`line 336 "t/t_preproc.v" 0
     					
`line 336 "t/t_preproc.v" 0
          		
`line 336 "t/t_preproc.v" 0
    							
`line 336 "t/t_preproc.v" 0
     assign a3 = ~b3 ;						
`line 336 "t/t_preproc.v" 0
  

`line 338 "t/t_preproc.v" 0
 
 	\
 
 






`line 347 "t/t_preproc.v" 0
   
`line 347 "t/t_preproc.v" 0
 		
`line 347 "t/t_preproc.v" 0
   def i		


`line 349 "t/t_preproc.v" 0
 

`line 351 "t/t_preproc.v" 0
 
 
 


`line 355 "t/t_preproc.v" 0
 

 



`line 361 "t/t_preproc.v" 0
1 /*verilator NOT IN DEFINE*/  (nodef)
2 /*verilator PART OF DEFINE*/  (hasdef)
3 
`line 363 "t/t_preproc.v" 0
/*verilator NOT PART
 OF DEFINE*/  (nodef)
`line 364 "t/t_preproc.v" 0
4 
`line 364 "t/t_preproc.v" 0
/*verilator PART 
 OF DEFINE*/  (nodef)
`line 365 "t/t_preproc.v" 0
5 also in  
`line 365 "t/t_preproc.v" 0
  also3 (nodef)
 

HAS a NEW 
`line 368 "t/t_preproc.v" 0
LINE

`line 370 "t/t_preproc.v" 0
 

`line 372 "t/t_preproc.v" 0
 












`line 385 "t/t_preproc.v" 0
 
 

`line 388 "t/t_preproc.v" 0
EXP: clxx_scen
clxx_scen
EXP: clxx_scen
"clxx_scen"
 
EXP: do if (start("verilog/inc1.v", 25)) begin  message({"Blah-", "clx_scen", " end"}); end  while(0);

`line 394 "t/t_preproc.v" 0
   do 
`line 394 "t/t_preproc.v" 0
        
`line 394 "t/t_preproc.v" 0
  
`line 394 "t/t_preproc.v" 0
    
`line 394 "t/t_preproc.v" 0
 
`line 394 "t/t_preproc.v" 0
      if (start("t/t_preproc.v", 394)) begin 
`line 394 "t/t_preproc.v" 0
 
`line 394 "t/t_preproc.v" 0
	 message({"Blah-", "clx_scen", " end"}); 
`line 394 "t/t_preproc.v" 0
      end 
`line 394 "t/t_preproc.v" 0
        
`line 394 "t/t_preproc.v" 0
   while(0);

`line 396 "t/t_preproc.v" 0
 

`line 398 "t/t_preproc.v" 0
 




`line 402 "t/t_preproc.v" 0
    
`line 402 "t/t_preproc.v" 0
    

`line 403 "t/t_preproc.v" 0
     
 
EXP: This is fooed
This is fooed
EXP: This is fooed_2
This is fooed_2

`line 410 "t/t_preproc.v" 0
 
 
np
np
 
 
 
 
 
    

`line 421 "t/t_preproc.v" 0
 
    

`line 424 "t/t_preproc.v" 0
 
 
 
 
 
 
 

`line 432 "t/t_preproc.v" 0
 
 
 

`line 436 "t/t_preproc.v" 0
hello3hello3hello3
hello4hello4hello4hello4
 
 
 
 
 
`line 442 "t/t_preproc.v" 0
`line 1 "t/t_preproc_inc4.vh" 1
 
`line 2 "t/t_preproc_inc4.vh" 0
 
 
 

`line 6 "t/t_preproc_inc4.vh" 0
 

`line 8 "t/t_preproc_inc4.vh" 2
`line 442 "t/t_preproc.v" 0

`line 443 "t/t_preproc.v" 0
   
 
 
 
 

 
 
     
`line 451 "t/t_preproc.v" 0
 
     
     
     
Line_Preproc_Check 455
 
 
 

 
Line_Preproc_Check 461
"FOO \
  BAR " "arg_line1 \
  arg_line2" "FOO \
  BAR "
`line 464 "t/t_preproc.v" 0
Line_Preproc_Check 464
 
 

`line 468 "t/t_preproc.v" 0
 
 
 
 
 
abc
 
 
 

`line 478 "t/t_preproc.v" 0
 
 
 
EXP: sonet_frame
sonet_frame

`line 484 "t/t_preproc.v" 0
 
 
EXP: sonet_frame
sonet_frame
 
 
 
EXP: sonet_frame
sonet_frame

`line 494 "t/t_preproc.v" 0
 
 
 
EXP: module zzz ; endmodule
module zzz ; endmodule
module zzz ; endmodule

`line 501 "t/t_preproc.v" 0
 
EXP: module a_b ; endmodule
module a_b ; endmodule
module a_b ; endmodule

`line 506 "t/t_preproc.v" 0
 
 
integer foo;
 
 
module t;
    
    
    
 
 

   initial begin : \`LEX_CAT(a[0],_assignment)  
`line 518 "t/t_preproc.v" 0
   $write("GOT%%m='%m' EXP='%s'\n", "t.\\`LEX_CAT(a[0],_assignment) ");   end
    
    
    
    
 

   initial begin : \a[0]_assignment_a[1] 
`line 525 "t/t_preproc.v" 0
   $write("GOT%%m='%m' EXP='%s'\n", "t.\\a[0]_assignment_a[1] ");   end
 
    
 
 
    
    
   initial begin : \`CAT(pp,suffix)   $write("GOT%%m='%m' EXP='%s'\n", "t.\\`CAT(pp,suffix) ");   end
   
    
 
 

    
   initial begin : \`CAT(ff,bb) 
`line 539 "t/t_preproc.v" 0
   $write("GOT%%m='%m' EXP='%s'\n", "t.\\`CAT(ff,bb) ");   end
   
    
 

    
   initial begin : \`zzz 
`line 545 "t/t_preproc.v" 0
   $write("GOT%%m='%m' EXP='%s'\n", "t.\\`zzz ");   end
 
    
 
 

    
   initial begin : \`FOO 
`line 552 "t/t_preproc.v" 0
    $write("GOT%%m='%m' OTHER_EXP='%s'\n OUR_EXP='%s'", "t.bar ","t.\\`FOO ");  end
    
   initial begin : \xx`FOO 
`line 554 "t/t_preproc.v" 0
   $write("GOT%%m='%m' EXP='%s'\n", "t.\\xx`FOO ");  end
   
    
    
 
   initial begin : \`UNKNOWN   $write("GOT%%m='%m' EXP='%s'\n", "t.\\`UNKNOWN ");   end
    
    
 
   initial begin : \`DEF_NO_EXPAND   $write("GOT%%m='%m' EXP='%s'\n", "t.\\`DEF_NO_EXPAND ");   end
 
    
    
    
 
   initial $write("GOT='%s' EXP='%s'\n", "foo bar baz", "foo bar baz");
 
    
    
 
 
   initial $write("GOT='%s' EXP='%s'\n", "foo `A(bar) baz", "foo `A(bar) baz");
    
    
    
 
   initial $write("Slashed=`%s'\n", "1//2.3");
    
    
 

   initial 
`line 585 "t/t_preproc.v" 0
       $display("%s%s","a1","b2c3\n");
endmodule

`line 588 "t/t_preproc.v" 0
 
 

`line 591 "t/t_preproc.v" 0
 
 
$display("RAM0");
$display("CPU");

`line 596 "t/t_preproc.v" 0
 
 
 
 

`line 601 "t/t_preproc.v" 0
 
XXE_FAMILY = XXE_
 
 
     $display("XXE_ is defined");


`line 608 "t/t_preproc.v" 0
 
XYE_FAMILY = XYE_
 
 
     $display("XYE_ is defined");


`line 615 "t/t_preproc.v" 0
 
XXS_FAMILY = XXS_some
 
 
     $display("XXS_some is defined");


`line 622 "t/t_preproc.v" 0
 
XYS_FAMILY = XYS_foo
 
 
     $display("XYS_foo is defined");


`line 629 "t/t_preproc.v" 0
 

`line 631 "t/t_preproc.v" 0
 
  
  
  
  
     
 

`line 639 "t/t_preproc.v" 0
  
  
  
  
     
 

`line 646 "t/t_preproc.v" 0
  
  
  
  
     
 

`line 653 "t/t_preproc.v" 0
  
  
  
  
     
 

`line 660 "t/t_preproc.v" 0
  

`line 662 "t/t_preproc.v" 0
  

`line 664 "t/t_preproc.v" 0
 
 
(.mySig (myInterface.pa5),

`line 668 "t/t_preproc.v" 0
 
 

`line 671 "t/t_preproc.v" 0
 
`dbg_hdl(UVM_LOW, ("Functional coverage enabled: paramgrp"));

`line 674 "t/t_preproc.v" 0
 
 

 




`line 682 "t/t_preproc.v" 0
module pcc2_cfg;
  generate
   
`line 684 "t/t_preproc.v" 0
  covergroup a @(posedge b); 
`line 684 "t/t_preproc.v" 0
    c: coverpoint d iff ((c) === 1'b1); endgroup 
`line 684 "t/t_preproc.v" 0
      a u_a; 
`line 684 "t/t_preproc.v" 0
   initial do begin $display ("DEBUG : %s [%m]", $sformatf ("Functional coverage enabled: u_a")); end while(0);
  endgenerate
endmodule

`line 688 "t/t_preproc.v" 0
 
 
 
"`NOT_DEFINED_STR"

`line 693 "t/t_preproc.v" 0
 
 
   
predef 0 0
predef 1 1
predef 2 2
predef 3 3
predef 10 10
predef 11 11
predef 20 20
predef 21 21
predef 22 22
predef 23 23
predef -2 -2
predef -1 -1
predef 0 0
predef 1 1
predef 2 2
 
 
 

`line 715 "t/t_preproc.v" 2
