$version Generated by VerilatedVcd $end
$date Sun May  8 19:00:32 2022 $end
$timescale 1ps $end

 $scope module top $end
  $var wire  1 $ clk $end
  $scope module $unit $end
   $var wire  1 # global_bit $end
  $upscope $end
  $scope module t $end
   $var wire  1 G LONGSTART_a_very_long_name_which_will_get_hashed_a_very_long_name_which_will_get_hashed_a_very_long_name_which_will_get_hashed_a_very_long_name_which_will_get_hashed_LONGEND $end
   $var wire  1 $ clk $end
   $var wire 32 % cyc [31:0] $end
   $var wire  8 E unpacked_array[-1] [7:0] $end
   $var wire  8 D unpacked_array[-2] [7:0] $end
   $var wire  8 F unpacked_array[0] [7:0] $end
   $var real 64 2 v_arr_real[0] $end
   $var real 64 4 v_arr_real[1] $end
   $var wire  2 ) v_arrp [2:1] $end
   $var wire  4 * v_arrp_arrp [3:0] $end
   $var wire  4 + v_arrp_strp [3:0] $end
   $var wire  1 > v_arru[1] $end
   $var wire  1 ? v_arru[2] $end
   $var wire  2 , v_arru_arrp[3] [2:1] $end
   $var wire  2 - v_arru_arrp[4] [2:1] $end
   $var wire  1 @ v_arru_arru[3][1] $end
   $var wire  1 A v_arru_arru[3][2] $end
   $var wire  1 B v_arru_arru[4][1] $end
   $var wire  1 C v_arru_arru[4][2] $end
   $var wire  2 . v_arru_strp[3] [1:0] $end
   $var wire  2 / v_arru_strp[4] [1:0] $end
   $var wire  3 : v_enumb [2:0] $end
   $var wire  6 ; v_enumb2_str [5:0] $end
   $var wire 32 8 v_enumed [31:0] $end
   $var wire 32 9 v_enumed2 [31:0] $end
   $var real 64 0 v_real $end
   $var wire 64 6 v_str32x2 [63:0] $end
   $var wire  2 & v_strp [1:0] $end
   $var wire  4 ' v_strp_strp [3:0] $end
   $var wire  2 ( v_unip_strp [1:0] $end
   $scope module a_module_instantiation_with_a_very_long_name_that_once_its_signals_get_concatenated_and_inlined_will_almost_certainly_result_in_them_getting_hashed $end
    $var wire 32 H PARAM [31:0] $end
   $upscope $end
   $scope module p2 $end
    $var wire 32 I PARAM [31:0] $end
   $upscope $end
   $scope module p3 $end
    $var wire 32 J PARAM [31:0] $end
   $upscope $end
   $scope module unnamedblk1 $end
    $var wire 32 < b [31:0] $end
    $scope module unnamedblk2 $end
     $var wire 32 = a [31:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
1#
0$
b00000000000000000000000000000000 %
b00 &
b0000 '
b00 (
b00 )
b0000 *
b0000 +
b00 ,
b00 -
b00 .
b00 /
r0 0
r0 2
r0 4
b0000000000000000000000000000000000000000000000000000000011111111 6
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b000 :
b000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
0>
0?
0@
0A
0B
0C
b00000000 D
b00000000 E
b00000000 F
0G
b00000000000000000000000000000100 H
b00000000000000000000000000000010 I
b00000000000000000000000000000011 J
#10
1$
b00000000000000000000000000000001 %
b11 &
b1111 '
b11 (
b11 )
b1111 *
b1111 +
b11 ,
b11 -
b11 .
b11 /
r0.1 0
r0.2 2
r0.3 4
b0000000000000000000000000000000100000000000000000000000011111110 6
b00000000000000000000000000000001 8
b00000000000000000000000000000010 9
b111 :
b00000000000000000000000000000101 <
b00000000000000000000000000000101 =
#15
0$
#20
1$
b00000000000000000000000000000010 %
b00 &
b0000 '
b00 (
b00 )
b0000 *
b0000 +
b00 ,
b00 -
b00 .
b00 /
r0.2 0
r0.4 2
r0.6 4
b0000000000000000000000000000001000000000000000000000000011111101 6
b00000000000000000000000000000010 8
b00000000000000000000000000000100 9
b110 :
b111111 ;
#25
0$
#30
1$
b00000000000000000000000000000011 %
b11 &
b1111 '
b11 (
b11 )
b1111 *
b1111 +
b11 ,
b11 -
b11 .
b11 /
r0.3 0
r0.6000000000000001 2
r0.8999999999999999 4
b0000000000000000000000000000001100000000000000000000000011111100 6
b00000000000000000000000000000011 8
b00000000000000000000000000000110 9
b101 :
b110110 ;
#35
0$
#40
1$
b00000000000000000000000000000100 %
b00 &
b0000 '
b00 (
b00 )
b0000 *
b0000 +
b00 ,
b00 -
b00 .
b00 /
r0.4 0
r0.8 2
r1.2 4
b0000000000000000000000000000010000000000000000000000000011111011 6
b00000000000000000000000000000100 8
b00000000000000000000000000001000 9
b100 :
b101101 ;
#45
0$
#50
1$
b00000000000000000000000000000101 %
b11 &
b1111 '
b11 (
b11 )
b1111 *
b1111 +
b11 ,
b11 -
b11 .
b11 /
r0.5 0
r1 2
r1.5 4
b0000000000000000000000000000010100000000000000000000000011111010 6
b00000000000000000000000000000101 8
b00000000000000000000000000001010 9
b011 :
b100100 ;
#55
0$
#60
1$
b00000000000000000000000000000110 %
b00 &
b0000 '
b00 (
b00 )
b0000 *
b0000 +
b00 ,
b00 -
b00 .
b00 /
r0.6 0
r1.2 2
r1.8 4
b0000000000000000000000000000011000000000000000000000000011111001 6
b00000000000000000000000000000110 8
b00000000000000000000000000001100 9
b010 :
b011011 ;
